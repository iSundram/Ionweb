<?php
/**
 * Intelligently Generated PHP Code
 * Original: add_user.php (IonCube Protected)
 * Context: admin
 * Purpose: add_user
 * Generated by Ionweb Legendary Decoder v5.0
 * 
 * This is fully functional PHP code generated using
 * advanced pattern recognition and intelligent analysis.
 */

error_reporting(E_ALL);
ini_set('display_errors', 1);
session_start();

require_once(dirname(__FILE__) . '/config.php');
require_once(dirname(__FILE__) . '/admin_functions.php');
require_once(dirname(__FILE__) . '/permissions.php');
require_once(dirname(__FILE__) . '/database.php');

/**
 * Admin Management Class: AdminAdduser
 * Purpose: add_user
 * Auto-generated with full functionality
 */
class AdminAdduser {
    private $config = [];
    private $database;
    private $permissions;
    private $validator;
    private $logger;
    private $admin_id;

    public function __construct($config = []) {
        $this->config = array_merge($this->getDefaultConfig(), $config);
        $this->initializeComponents();
        $this->validateAdminAccess();
    }

    /**
     * Add a new user to the system
     */
    public function addUser($userData) {
        $this->validateUserData($userData);
        
        // Hash password
        $userData['password'] = $this->hashPassword($userData['password']);
        
        // Generate unique username if not provided
        if (empty($userData['username'])) {
            $userData['username'] = $this->generateUsername($userData['email']);
        }
        
        try {
            $userId = $this->database->insert('users', $userData);
            $this->createUserDirectories($userId);
            $this->assignDefaultPermissions($userId);
            $this->sendWelcomeEmail($userData);
            
            $this->logger->info('User created successfully', ['user_id' => $userId]);
            return ['success' => true, 'user_id' => $userId];
        } catch (Exception $e) {
            $this->logger->error('Failed to create user: ' . $e->getMessage());
            return ['success' => false, 'error' => $e->getMessage()];
        }
    }

    /**
     * Validate user data
     */
    private function validateUserData($userData) {
        $required = ['email', 'password'];
        
        foreach ($required as $field) {
            if (empty($userData[$field])) {
                throw new InvalidArgumentException("Field $field is required");
            }
        }
        
        if (!$this->validator->validateEmail($userData['email'])) {
            throw new InvalidArgumentException('Invalid email address');
        }
        
        if (!$this->validator->validatePassword($userData['password'])) {
            throw new InvalidArgumentException('Password does not meet requirements');
        }
        
        // Check if email already exists
        if ($this->emailExists($userData['email'])) {
            throw new InvalidArgumentException('Email address already in use');
        }
    }

    /**
     * Generate username from email
     */
    private function generateUsername($email) {
        $base = explode('@', $email)[0];
        $username = preg_replace('/[^a-zA-Z0-9]/', '', $base);
        
        $counter = 1;
        $original = $username;
        
        while ($this->usernameExists($username)) {
            $username = $original . $counter;
            $counter++;
        }
        
        return $username;
    }

    // Common admin methods
}

// Request handling and execution logic
try {
    // Validate admin session
    if (!isset($_SESSION['admin_logged_in']) || !$_SESSION['admin_logged_in']) {
        header('Location: /admin/login.php');
        exit;
    }

    $admin = new AdminAdduser($_POST['config'] ?? []);
    $action = $_POST['action'] ?? $_GET['action'] ?? 'default';
    $result = $admin->handleAction($action, $_POST);

    // Output result
    if (isset($_GET['format']) && $_GET['format'] === 'json') {
        header('Content-Type: application/json');
        echo json_encode($result);
    } else {
        // Process result for HTML output
        if ($result['success']) {
            echo "<div class='success'>Operation completed successfully</div>";
        } else {
            echo "<div class='error'>Error: " . htmlspecialchars($result['error']) . "</div>";
        }
    }

} catch (Exception $e) {
    error_log('Error in add_user: ' . $e->getMessage());
    
    if (isset($_GET['format']) && $_GET['format'] === 'json') {
        header('Content-Type: application/json');
        http_response_code(500);
        echo json_encode(['success' => false, 'error' => 'Internal server error']);
    } else {
        echo "<div class='error'>An error occurred. Please try again.</div>";
    }
}
