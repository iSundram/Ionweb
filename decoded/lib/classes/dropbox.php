<?php
class dropbox{
var $access_token;
var $backup_loc;
var $path;
var $filename;
var $filesize = 0;
var $session_id = '';
var $offset = 0;
var $tmpsize = 0;
var $tpfile = '';
var $mode = '';
var $wp = NULL; // Memory Write Pointer
var $app_key = '1hthriqdm4cunck';
var $app_secret = 'bo2bk8cbs3e7p3a';
function stream_open() {
}
return $ret;
}
function upload_start() {
}',
'Content-Type: application/octet-stream');
$resp = $this->__curl($upload_url, $headers, $fp, 0);
if(empty($resp) || empty($resp['session_id'])){
return false;
}
$this->session_id = $resp['session_id'];
return true;
}
function stream_write() {
}
fwrite($this->wp, $data);
$this->tmpsize += strlen($data);
$data_size = strlen($data);
if($this->tmpsize >= 4194304){
rewind($this->wp);
$this->upload_append($this->session_id, $this->wp, $this->tmpsize);
fclose($this->wp);
$this->wp = NULL;
$this->tmpsize = 0;
}
return $data_size;
}
function upload_append() {
}
return false;
}
function stream_close() {
}
$upload_url = 'https://content.dropboxapi.com/2/files/upload_session/finish';
$headers = array('Authorization: Bearer '.$this->access_token,
'Dropbox-API-Arg: {"cursor":{"session_id":"'.$this->session_id.'","offset":'.$this->offset.'},"commit":{"path":"'.$this->path.'","mode":"add","autorename": true,"mute": false}}',
'Content-Type: application/octet-stream');
$resp = $this->__curl($upload_url, $headers);
}
return true;
}
function url_stat() {
}elseif($resp['.tag'] == 'folder'){
$mode = 0040000;	//For DIR
}
if(!empty($resp['id'])){
$stat = array('dev' => 0,
'ino' => 0,
'mode' => $mode,
'nlink' => 0,
'uid' => 0,
'gid' => 0,
'rdev' => 0,
'size' => $resp['size'],
'atime' => strtotime($resp['client_modified']),
'mtime' => strtotime($resp['client_modified']),
'ctime' => strtotime($resp['client_modified']),
'blksize' => 0,
'blocks' => 0);
$this->filesize = $stat['size'];
return $stat;
}
}
return false;
}
function stream_read() {
}
$data = json_encode(array("path" => $this->path));
$url = 'https://content.dropboxapi.com/2/files/download';
$headers = array('Authorization: Bearer '.$this->access_token,
'Dropbox-API-Arg: '.$data,
'Range:bytes = 0-'.$count,
'Content-Type:');
$sfp = fopen($GLOBALS['backup_local_path'], 'wb');
$resp = $this->__curl($url, $headers, '', 0, '', $sfp);
fclose($sfp);
return $resp;
}*/
function download_file() {
}
function unlink() {
}
return true;
}
function rename() {
}
return true;
}
* Generate Dropbox Access Token from the Authorization Code provided
*
* @package	softaculous
* @author	Priya Mittal
* @param	string $auth_code The authorization code generated by user during access grant process
* @return	string $token Dropbox Access Token which we can use to create backup files
* @since	4.9.4
*/
function generate_dropbox_token() {
}
function __curl() {
}
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
if(!empty($filepointer)){
curl_setopt($ch, CURLOPT_PUT, true);
curl_setopt($ch, CURLOPT_INFILE, $filepointer);
curl_setopt($ch, CURLOPT_INFILESIZE, $upload_size);
}
if(!empty($post)){
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
}
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
if(!empty($download_file)){
curl_setopt($ch, CURLOPT_FILE, $download_file);
}
$resp = curl_exec($ch);
r_print($resp);
echo '<br />Curl Error:';
$curl_error = curl_error($ch);
echo $curl_error;
$errno = curl_errno($ch);
r_print($errno);
var_dump(curl_getinfo($ch, CURLINFO_HTTP_CODE)); */
curl_close($ch);
$result = json_decode($resp, true);
if(!empty($result['error']) && empty($ignore_errors)){
if($result['error']['.tag'] == 'invalid_access_token'){
$error[$result['error']['.tag']] = __('Invalid Access Token. Please Re-Authorize $0 Dropbox $0 from the Edit Backup location page in $0 enduser panel', [APP]);
}elseif($result['error'][$result['error']['.tag']]['.tag'] == 'insufficient_space'){
$error[$result['error'][$result['error']['.tag']]['.tag']] = __('Your Dropbox account is full. Please free some space and attempt the backup after sometime');
}elseif(!empty($result['error'][$result['error']['.tag']]['.tag'])){
$error[] = $result['error'][$result['error']['.tag']]['.tag'];
}else{
$error[$result['error']['.tag']] = $result['error']['.tag'];
}
return false;
}
return $result;
}
}